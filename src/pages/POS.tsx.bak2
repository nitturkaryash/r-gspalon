import { useState, useEffect, useMemo } from "react";
import { useLocation } from "react-router-dom";
import {
  Box,
  Typography,
  Paper,
  Grid,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  CircularProgress,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Divider,
  Tabs,
  Tab,
  Card,
  CardContent,
  CardActions,
  IconButton,
  Chip,
  TableContainer,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Autocomplete,
  InputAdornment,
  Stepper,
  Step,
  StepLabel,
  Alert,
  Snackbar,
  Collapse,
  Stack,
  Switch,
  FormControlLabel,
  SelectChangeEvent,
  Checkbox,
} from "@mui/material";

const [isSalonPurchase, setIsSalonPurchase] = useState<boolean>(false);
const [salonPurchaseNote, setSalonPurchaseNote] = useState<string>("");

      <Paper sx={{ mb: 2 }}>
        <Tabs
          value={tabValue}
          onChange={(_, newValue) => setTabValue(newValue)}
          indicatorColor="primary"
          textColor="primary"
          centered
        >
          <Tab label="Walk-In Order" icon={<ShoppingBasketIcon />} />
          <Tab
            label="Appointment Payment"
            icon={<PaymentIcon />}
            disabled={true}
          />
        </Tabs>
      </Paper>

      {/* Walk-In Order Panel */}
      <TabPanel value={tabValue} index={0}>
        <Paper sx={{ p: 0, block-size: "100%", borderRadius: '8px' }}>
          {/* Stepper for walkthrough */}
          <Stepper
            activeStep={activeStep}
            sx={{ p: 3, borderinset-block-end: "1px solid rgba(0, 0, 0, 0.12)" }}
          >
            <Step>
              <StepLabel>Customer Info</StepLabel>
            </Step>
            <Step>
              <StepLabel>Services & Products</StepLabel>
            </Step>
            <Step>
              <StepLabel>Payment</StepLabel>
            </Step>
          </Stepper>

          {/* Main content based on active step */}
          <Box
            sx={{
              p: 0,
              block-size: "calc(100% - 72px)",
              display: "flex",
              flexDirection: "column",
            }}
          >
            <Grid container spacing={2} sx={{ flexGrow: 1 }}>
              {/* Left side - Form based on current step */}
              <Grid
                item
                xs={12}
                md={8}
                sx={{ block-size: "100%", overflowY: "auto" }}
              >
                {activeStep === 0 && (
                  <Box sx={{ p: 3 }}>
                    <Typography variant="h6" gutterBottom>
                      Customer Information
                    </Typography>

                    <Grid container spacing={3}>
                      <Grid item xs={12} md={6}>
                        <Autocomplete
                          options={clients || []}
                          getOptionLabel={(option) => option.full_name || ""}
                          value={selectedClient}
                          onChange={(_, newValue) =>
                            handleClientSelect(newValue)
                          }
                          renderInput={(params) => (
                            <TextField
                              {...params}
                              label="Select Existing Client"
                              variant="outlined"
                              fullWidth
                            />
                          )}
                        />
                      </Grid>
                      <Grid item xs={12} md={6}>
                        <TextField
                          fullWidth
                          label="Customer Name"
                          variant="outlined"
                          value={customerName}
                          onChange={(e) => setCustomerName(e.target.value)}
                          sx={{ mb: 2, '& .MuiOutlinedInput-root': { borderRadius: '8px' } }}
                        />
                      </Grid>
                      <Grid item xs={12} md={6}>
                        <FormControl
                          fullWidth
                          required
                          error={activeStep === 0 && selectedStylist === ""}
                        >
                          <InputLabel id="stylist-select-label">
                            Select Stylist
                          </InputLabel>
                          <Select
                            labelId="stylist-select-label"
                            id="stylist-select"
                            value={selectedStylist}
                            label="Select Stylist"
                            onChange={(e) => setSelectedStylist(e.target.value)}
                            sx={{ borderRadius: '8px' }}
                          >
                            <MenuItem value="">
                              <em>None</em>
                            </MenuItem>
                            {stylists?.map((stylist) => (
                              <MenuItem key={stylist.id} value={stylist.id}>
                                {stylist.name}
                              </MenuItem>
                            ))}
                          </Select>
                          {activeStep === 0 && selectedStylist === "" && (
                            <Typography variant="caption" color="error">
                              Stylist is required
                            </Typography>
                          )}
                        </FormControl>
                      </Grid>
                      
                      {/* Add Salon Purchase option */}
                      <Grid item xs={12}>
                        <FormControlLabel
                          control={
                            <Checkbox
                              checked={isSalonPurchase}
                              onChange={(e) => setIsSalonPurchase(e.target.checked)}
                              color="primary"
                            />
                          }
                          label={
                            <Typography sx={{ fontWeight: 500 }}>
                              Salon Purchase (for salon use only)
                            </Typography>
                          }
                          sx={{ mt: 2, mb: 1 }}
                        />
                        
                        {isSalonPurchase && (
                          <TextField
                            fullWidth
                            label="Purchase Reason/Note"
                            variant="outlined"
                            value={salonPurchaseNote}
                            onChange={(e) => setSalonPurchaseNote(e.target.value)}
                            placeholder="Enter reason for purchase (e.g. 'Stock replenishment', 'New product testing')"
                            sx={{ mb: 2, '& .MuiOutlinedInput-root': { borderRadius: '8px' } }}
                          />
                        )}

                        {isSalonPurchase && (
                          <Grid item xs={12}>
                            <Alert severity="info" sx={{ mt: 1, mb: 2 }}>
                              This purchase is for salon use only. Products will be tracked in inventory management and will not be billed to any customer.
                            </Alert>
                          </Grid>
                        )}
                      </Grid>
                      
                      <Grid item xs={12}>
                        <Typography variant="subtitle1" gutterBottom>
                          Appointment Time (Optional)
                        </Typography>
                        <Typography
                          variant="body2"
                          color="text.secondary"
                          gutterBottom
                        >
                          You can optionally specify when this service will be
                          provided.
                        </Typography>
                        <Box sx={{ mt: 2 }}>
                          <Grid container spacing={2}>
                            <Grid item xs={12} md={6}>
                              <LocalizationProvider
                                dateAdapter={AdapterDateFns}
                              >
                                <DatePicker
                                  label="Date"
                                  value={appointmentDate}
                                  onChange={(newValue) =>
                                    setAppointmentDate(newValue)
                                  }
                                  slotProps={{
                                    textField: {
                                      fullinline-size: true,
                                      variant: "outlined",
                                    },
                                  }}
                                />
                              </LocalizationProvider>
                            </Grid>
                            <Grid item xs={12} md={6}>
                              <LocalizationProvider
                                dateAdapter={AdapterDateFns}
                              >
                                <TimePicker
                                  label="Time"
                                  value={appointmentTime}
                                  onChange={(newValue) =>
                                    setAppointmentTime(newValue)
                                  }
                                  slotProps={{
                                    textField: {
                                      fullinline-size: true,
                                      variant: "outlined",
                                    },
                                  }}
                                  disabled={!appointmentDate}
                                />
                              </LocalizationProvider>
                            </Grid>
                          </Grid>
                        </Box>
                      </Grid>
                    </Grid>
                  </Box>
                )}

                {activeStep === 1 && (
                  <>
                    {!isSalonPurchase && renderServiceSelectionSection()}
                    {renderProductsSelectionSection()}
                  </>
                )}

                {activeStep === 2 && (
                  <Box sx={{ p: 3 }}>
                    <Typography variant="h6" gutterBottom>
                      Payment Details
                    </Typography>

                    <Grid container spacing={3}>
                      <Grid item xs={12} md={6}>
                        <FormControl fullWidth>
                          <InputLabel id="payment-method-label">
                            Payment Method
                          </InputLabel>
                          <Select
                            labelId="payment-method-label"
                            value={walkInPaymentMethod}
                            onChange={(e) =>
                              setWalkInPaymentMethod(
                                e.target.value as PaymentMethod,
                              )
                            }
                            label="Payment Method"
                          >
                            {PAYMENT_METHODS.map((method) => (
                              <MenuItem key={method} value={method}>
                                <Box
                                  sx={{ display: "flex", alignItems: "center" }}
                                >
                                  <Box sx={{ mr: 1 }}>
                                    {PaymentIcons[method]}
                                  </Box>
                                  {PAYMENT_METHOD_LABELS[method]}
                                </Box>
                              </MenuItem>
                            ))}
                          </Select>
                        </FormControl>
                      </Grid>
                      <Grid item xs={12} md={6}>
                        <TextField
                          fullWidth
                          label="Discount"
                          variant="outlined"
                          type="number"
                          value={walkInDiscount}
                          onChange={(e) =>
                            setWalkInDiscount(Math.round(Number(e.target.value)))
                          }
                          InputProps={{
                            inputProps: { min: 0, step: 1 },
                            startAdornment: (
                              <InputAdornment position="start">
                                ₹
                              </InputAdornment>
                            ),
                          }}
                        />
                      </Grid>

                      <Grid item xs={12}>
                        <FormControlLabel
                          control={
                            <Switch
                              checked={isSplitPayment}
                              onChange={(e) =>
                                setIsSplitPayment(e.target.checked)
                              }
                              color="primary"
                            />
                          }
                          label="Split Payment"
                        />
                      </Grid>

                      <Grid item xs={12}>
                        <Collapse in={isSplitPayment}>
                          <Paper variant="outlined" sx={{ p: 2, borderRadius: '8px', mb: 2 }}>
                            <Typography variant="subtitle1" gutterBottom>
                              Add Payment
                            </Typography>

                            <Grid container spacing={2} alignItems="center">
                              <Grid item xs={12} sm={5}>
                                <TextField
                                  fullWidth
                                  label="Amount"
                                  variant="outlined"
                                  type="number"
                                  value={newPaymentAmount}
                                  onChange={(e) =>
                                    setNewPaymentAmount(Math.round(Number(e.target.value)))
                                  }
                                  InputProps={{
                                    inputProps: { min: 0, step: 1 },
                                    startAdornment: (
                                      <InputAdornment position="start">
                                        ₹
                                      </InputAdornment>
                                    ),
                                  }}
                                />
                              </Grid>
                              <Grid item xs={12} sm={5}>
                                <FormControl fullWidth>
                                  <InputLabel id="new-payment-method-label">
                                    Payment Method
                                  </InputLabel>
                                  <Select
                                    labelId="new-payment-method-label"
                                    value={newPaymentMethod}
                                    onChange={(e) =>
                                      setNewPaymentMethod(
                                        e.target.value as PaymentMethod,
                                      )
                                    }
                                    label="Payment Method"
                                  >
                                    {PAYMENT_METHODS.map((method) => (
                                      <MenuItem key={method} value={method}>
                                        <Box
                                          sx={{
                                            display: "flex",
                                            alignItems: "center",
                                          }}
                                        >
                                          <Box sx={{ mr: 1 }}>
                                            {PaymentIcons[method]}
                                          </Box>
                                          {PAYMENT_METHOD_LABELS[method]}
                                        </Box>
                                      </MenuItem>
                                    ))}
                                  </Select>
                                </FormControl>
                              </Grid>
                              <Grid item xs={12} sm={2}>
                                <Button
                                  variant="contained"
                                  color="primary"
                                  fullWidth
                                  onClick={handleAddSplitPayment}
                                  disabled={
                                    newPaymentAmount <= 0 ||
                                    newPaymentAmount > pendingAmount ||
                                    splitPayments.length >= 2
                                  }
                                >
                                  Add
                                </Button>
                              </Grid>
                            </Grid>

                            {/* Display pending amount */}
                            <Box
                              sx={{
                                mt: 2,
                                display: "flex",
                                justifyContent: "space-between",
                              }}
                            >
                              <Typography>Pending Amount:</Typography>
                              <Typography
                                fontWeight="medium"
                                color={pendingAmount > 0 ? "error" : "success"}
                              >
                                {formatCurrency(pendingAmount)}
                              </Typography>
                            </Box>

                            {/* Show split payments */}
                            {splitPayments.length > 0 && (
                              <Box sx={{ mt: 2 }}>
                                <Typography variant="subtitle1" gutterBottom>
                                  Payment Breakdown
                                </Typography>
                                <TableContainer
                                  component={Paper}
                                  variant="outlined"
                                  sx={{ borderRadius: '8px', overflow: 'hidden' }}
                                >
                                  <Table size="small">
                                    <TableHead>
                                      <TableRow>
                                        <TableCell>Method</TableCell>
                                        <TableCell align="right">
                                          Amount
                                        </TableCell>
                                        <TableCell></TableCell>
                                      </TableRow>
                                    </TableHead>
                                    <TableBody>
                                      {splitPayments.map((payment) => (
                                        <TableRow key={payment.id}>
                                          <TableCell>
                                            <Box
                                              sx={{
                                                display: "flex",
                                                alignItems: "center",
                                              }}
                                            >
                                              <Box sx={{ mr: 1 }}>
                                                {
                                                  PaymentIcons[
                                                    payment.payment_method
                                                  ]
                                                }
                                              </Box>
                                              {
                                                PAYMENT_METHOD_LABELS[
                                                  payment.payment_method
                                                ]
                                              }
                                            </Box>
                                          </TableCell>
                                          <TableCell align="right">
                                            {formatCurrency(payment.amount)}
                                          </TableCell>
                                          <TableCell align="right">
                                            <IconButton
                                              size="small"
                                              color="error"
                                              onClick={() =>
                                                handleRemoveSplitPayment(
                                                  payment.id,
                                                )
                                              }
                                            >
                                              <DeleteOutlineIcon fontSize="small" />
                                            </IconButton>
                                          </TableCell>
                                        </TableRow>
                                      ))}
                                      <TableRow>
                                        <TableCell>
                                          <strong>Total Paid</strong>
                                        </TableCell>
                                        <TableCell align="right" colSpan={2}>
                                          <strong>
                                            {formatCurrency(getAmountPaid())}
                                          </strong>
                                        </TableCell>
                                      </TableRow>
                                    </TableBody>
                                  </Table>
                                </TableContainer>
                              </Box>
                            )}
                          </Paper>
                        </Collapse>
                      </Grid>
                    </Grid>
                  </Box>
                )}

                {/* Navigation buttons */}
                <Box
                  sx={{
                    display: "flex",
                    justifyContent: "space-between",
                    p: 3,
                  }}
                >
                  <Button
                    variant="outlined"
                    onClick={handleBack}
                    disabled={activeStep === 0}
                  >
                    Back
                  </Button>

                  {activeStep === 2 ? (
                    <Button
                      variant="contained"
                      color="primary"
                      onClick={handleCreateWalkInOrder}
                      disabled={processing || !isStepValid()}
                      startIcon={
                        processing ? (
                          <CircularProgress size={20} />
                        ) : (
                          <CheckIcon />
                        )
                      }
                    >
                      {processing ? "Processing..." : "Complete Order"}
                    </Button>
                  ) : (
                    <Button 
                      variant="contained" 
                      onClick={handleNext} 
                      disabled={!isStepValid()}
                      sx={{ 
                        borderRadius: '8px', 
                        textTransform: 'none',
                        fontWeight: 500,
                        fontSize: '1rem'
                      }}
                    >
                      Next
                    </Button>
                  )}
                </Box>
              </Grid>

              {/* Right side - Order Summary */}
              <Grid item xs={12} md={4} sx={{ block-size: "100%" }}>
                <Paper
                  sx={{
                    p: 3,
                    block-size: "100%",
                    display: "flex",
                    flexDirection: "column",
                  }}
                >
                  <Typography variant="h6" gutterBottom>
                    Order Summary
                  </Typography>

                  {orderItems.length > 0 ? (
                    <Box
                      sx={{ flex: 1, display: "flex", flexDirection: "column" }}
                    >
                      <List sx={{ flex: 1, overflow: "auto" }}>
                        {/* Show services */}
                        {serviceItems.length > 0 && (
                          <ListItem dense>
                            <ListItemText
                              primary={
                                <Typography variant="subtitle2" color="primary">
                                  Services
                                </Typography>
                              }
                            />
                          </ListItem>
                        )}

                        {serviceItems.map((item) => (
                          <ListItem key={item.service.id}>
                            <ListItemText
                              primary={
                                <Box
                                  sx={{ display: "flex", alignItems: "center" }}
                                >
                                  <ContentCutIcon
                                    fontSize="small"
                                    sx={{ mr: 1, opacity: 0.7 }}
                                  />
                                  <Typography>
                                    {item.service.name} (×{item.quantity})
                                  </Typography>
                                </Box>
                              }
                              secondary={
                                item.service.duration
                                  ? `${item.service.duration} min`
                                  : null
                              }
                            />
                            <ListItemSecondaryAction>
                              <Typography>
                                {formatCurrency(
                                  (item.customPrice || item.service.price) *
                                    item.quantity,
                                )}
                              </Typography>
                            </ListItemSecondaryAction>
                          </ListItem>
                        ))}

                        {/* Show products */}
                        {productItems.length > 0 && (
                          <ListItem
                            dense
                            sx={{ mt: serviceItems.length > 0 ? 2 : 0 }}
                          >
                            <ListItemText
                              primary={
                                <Typography
                                  variant="subtitle2"
                                  color="secondary"
                                >
                                  Products
                                </Typography>
                              }
                            />
                          </ListItem>
                        )}

                        {productItems.map((item) => (
                          <ListItem key={item.service.id}>
                            <ListItemText
                              primary={
                                <Box
                                  sx={{ display: "flex", alignItems: "center" }}
                                >
                                  <ShoppingBasketIcon
                                    fontSize="small"
                                    sx={{ mr: 1, opacity: 0.7 }}
                                  />
                                  <Typography>
                                    {item.service.name} (×{item.quantity})
                                  </Typography>
                                </Box>
                              }
                            />
                            <ListItemSecondaryAction>
                              <Typography>
                                {formatCurrency(
                                  (item.customPrice || item.service.price) *
                                    item.quantity,
                                )}
                              </Typography>
                            </ListItemSecondaryAction>
                          </ListItem>
                        ))}
                        
                        {/* Show salon-use products separately */}
                        {salonUseItems.length > 0 && (
                          <>
                            <ListItem
                              dense
                              sx={{ mt: 2 }}
                            >
                              <ListItemText
                                primary={
                                  <Typography
                                    variant="subtitle2"
                                    color="warning.main"
                                  >
                                    Salon Use Products (not billed to customer)
                                  </Typography>
                                }
                              />
                            </ListItem>
                            
                            {salonUseItems.map((item) => (
                              <ListItem key={`salon-${item.service.id}`}>
                                <ListItemText
                                  primary={
                                    <Box
                                      sx={{ display: "flex", alignItems: "center" }}
                                    >
                                      <ShoppingBasketIcon
                                        fontSize="small"
                                        sx={{ mr: 1, opacity: 0.7, color: "warning.main" }}
                                      />
                                      <Typography color="text.secondary">
                                        {item.service.name} (×{item.quantity})
                                      </Typography>
                                    </Box>
                                  }
                                  secondary={item.consumptionPurpose || "For salon use"}
                                />
                                <ListItemSecondaryAction>
                                  <Typography color="text.secondary">
                                    {formatCurrency(
                                      (item.customPrice || item.service.price) *
                                        item.quantity,
                                    )}
                                  </Typography>
                                </ListItemSecondaryAction>
                              </ListItem>
                            ))}
                          </>
                        )}
                      </List>

                      <Divider sx={{ my: 2 }} />

                      {/* Order Totals */}
                      <Box>
                        {serviceItems.length > 0 && (
                          <Box
                            sx={{
                              display: "flex",
                              justifyContent: "space-between",
                              mb: 1,
                            }}
                          >
                            <Typography>Service Subtotal:</Typography>
                            <Typography>
                              {formatCurrency(serviceSubtotal)}
                            </Typography>
                          </Box>
                        )}

                        {productItems.length > 0 && (
                          <Box
                            sx={{
                              display: "flex",
                              justifyContent: "space-between",
                              mb: 1,
                            }}
                          >
                            <Typography>Product Subtotal:</Typography>
                            <Typography>
                              {formatCurrency(productSubtotal)}
                            </Typography>
                          </Box>
                        )}

                        {serviceItems.length > 0 && productItems.length > 0 && (
                          <Box
                            sx={{
                              display: "flex",
                              justifyContent: "space-between",
                              mb: 1,
                              pt: 1,
                              borderinset-block-start: "1px dashed rgba(0, 0, 0, 0.12)",
                            }}
                          >
                            <Typography fontWeight="medium">
                              Combined Subtotal:
                            </Typography>
                            <Typography fontWeight="medium">
                              {formatCurrency(orderSubtotal)}
                            </Typography>
                          </Box>
                        )}

                        {/* Display GST for all payment methods */}
                        <Box
                          sx={{
                            display: "flex",
                            justifyContent: "space-between",
                            mb: 1,
                          }}
                        >
                          <Typography>GST (18%):</Typography>
                          <Typography>{formatCurrency(tax)}</Typography>
                        </Box>

                        <Box
                          sx={{
                            display: "flex",
                            justifyContent: "space-between",
                            mb: 1,
                          }}
                        >
                          <Typography>Discount:</Typography>
                          <Typography color="error">
                            -{formatCurrency(walkInDiscount)}
                          </Typography>
                        </Box>

                        <Divider sx={{ my: 1 }} />

                        <Box
                          sx={{
                            display: "flex",
                            justifyContent: "space-between",
                          }}
                        >
                          <Typography variant="h6">Total:</Typography>
                          <Typography variant="h6" color="primary">
                            {formatCurrency(total)}
                          </Typography>
                        </Box>
                      </Box>

                      {/* Customer & Stylist Info */}
                      {customerName && selectedStylist && (
                        <Box sx={{ mt: 2 }}>
                          <Chip
                            icon={<PersonIcon />}
                            label={`Customer: ${customerName}`}
                            sx={{ mb: 1, mr: 1 }}
                          />
                          <Chip
                            icon={<ContentCutIcon />}
                            label={`Stylist: ${stylists?.find((s) => s.id === selectedStylist)?.name}`}
                            sx={{ mb: 1 }}
                          />

                          {appointmentDate && appointmentTime && (
                            <Chip
                              icon={<AccessTimeIcon />}
                              label={`${appointmentDate.toLocaleDateString()} at ${appointmentTime.toLocaleTimeString([], { hour: "numeric", minute: "2-digit", hour12: true })}`}
                              sx={{ mb: 1 }}
                            />
                          )}
                        </Box>
                      )}
                    </Box>
                  ) : (
                    <Box
                      sx={{
                        display: "flex",
                        flexDirection: "column",
                        justifyContent: "center",
                        alignItems: "center",
                        flex: 1,
                      }}
                    >
                      <CartIcon
                        sx={{ fontSize: 60, color: "text.disabled", mb: 2 }}
                      />
                      <Typography variant="h6" color="text.secondary">
                        Your cart is empty
                      </Typography>
                      <Typography
                        variant="body2"
                        color="text.secondary"
                        align="center"
                      >
                        Add services to create an order
                      </Typography>
                    </Box>
                  )}
                </Paper>
              </Grid>
            </Grid>
          </Box>
        </Paper>
      </TabPanel>

      {/* Appointment Payment Panel */}
      <TabPanel value={tabValue} index={1}>
        <Paper sx={{ p: 3, block-size: "100%" }}>
          <Typography variant="h6" gutterBottom>
            Process Appointment Payment
          </Typography>

          {/* This tab is disabled in the current implementation */}
          <Alert severity="info">
            This feature is coming soon! Please use the Walk-In Order tab for
            now.
          </Alert>
        </Paper>
      </TabPanel>

      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbarOpen}
        autoHideDuration={5000}
        onClose={() => setSnackbarOpen(false)}
        message={snackbarMessage}
      />
    </Box>
  );
}

const renderProductsSelectionSection = () => {
  return (
    <Box sx={{ mt: !isSalonPurchase ? 3 : 0, p: 3 }}>
      <Typography variant="h6" gutterBottom>
        {isSalonPurchase ? "Salon Purchase Products" : "Add Products (Optional)"}
      </Typography>
      {/* Rest of the product selection code remains the same */}
    </Box>
  );
}

const handleAddToOrder = (service: POSService, quantity: number = 1, customPrice?: number) => {
  // Create a new order item
  const newItem: OrderItem = {
    service,
    quantity,
    type: service.type || "product",
    customPrice: customPrice,
    // Mark all products as for salon use when in salon purchase mode
    forSalonUse: isSalonPurchase && service.type === "product",
    consumptionPurpose: isSalonPurchase ? salonPurchaseNote : undefined
  };
  
  // Add to order items
  setOrderItems((prev) => [...prev, newItem]);
};

const isStepValid = () => {
  if (activeStep === 0) {
    if (isSalonPurchase) {
      // For salon purchases, only stylist selection is required
      return selectedStylist !== "";
    } else {
      // For regular orders, both customer name and stylist are required
      return customerName.trim() !== "" && selectedStylist !== "";
    }
  }
  
  if (activeStep === 1) {
    if (isSalonPurchase) {
      // Salon purchases must include at least one product
      return orderItems.some(item => item.type === "product");
    } else {
      // Regular orders must have at least one service or product
      return orderItems.length > 0;
    }
  }
  
  // For payment step
  if (activeStep === 2) {
    if (isSplitPayment) {
      return pendingAmount <= 0;
    }
    return true;
  }
  
  return true;
};

const handleCreateWalkInOrder = async () => {
  try {
    setProcessing(true);
    
    // Prepare service items for the order
    const serviceItemsForOrder = orderItems.map(item => ({
      service_id: item.service.id,
      service_name: item.service.name,
      price: item.customPrice || item.service.price,
      type: item.type,
      forSalonUse: item.forSalonUse || false,
      consumptionPurpose: item.consumptionPurpose || ''
    }));
    
    // Format appointment time if available
    let formattedAppointmentTime: string | undefined = undefined;
    if (appointmentDate && appointmentTime) {
      const date = new Date(appointmentDate);
      date.setHours(appointmentTime.getHours());
      date.setMinutes(appointmentTime.getMinutes());
      formattedAppointmentTime = date.toISOString();
    }
    
    // Create order data
    const orderData: any = {
      client_name: isSalonPurchase ? "Salon Internal" : customerName,
      stylist_id: selectedStylist,
      services: serviceItemsForOrder,
      total: total,
      subtotal: orderSubtotal,
      tax: tax,
      discount: walkInDiscount,
      payment_method: walkInPaymentMethod,
      is_walk_in: true,
      appointment_time: formattedAppointmentTime,
      payments: isSplitPayment ? splitPayments : undefined,
      // Add salon purchase flag and note
      is_salon_purchase: isSalonPurchase,
      salon_purchase_note: isSalonPurchase ? salonPurchaseNote : null,
    };
    
    // Rest of the function remains the same
    // ...
  } catch (error) {
    // Handle error
    // ...
  } finally {
    setProcessing(false);
  }
};

// Add a function to reset all form state including salon purchase
const resetFormState = () => {
  setCustomerName("");
  setSelectedClient(null);
  setSelectedStylist("");
  setOrderItems([]);
  setWalkInPaymentMethod("cash");
  setWalkInDiscount(0);
  setIsSplitPayment(false);
  setSplitPayments([]);
  setNewPaymentAmount(0);
  setNewPaymentMethod("cash");
  setActiveStep(0);
  setAppointmentDate(new Date());
  setAppointmentTime(new Date());
  
  // Reset salon purchase state
  setIsSalonPurchase(false);
  setSalonPurchaseNote("");
};

